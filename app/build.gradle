apply plugin: 'com.android.application'
apply plugin: 'com.github.spotbugs'
apply plugin: 'pmd'
apply plugin: 'org.greenrobot.greendao' // apply plugin

def ABORT_ON_CHECK_FAILURE=false

tasks.withType(Test) {
    systemProperty 'MiFirmwareDir', System.getProperty('MiFirmwareDir', null)
    systemProperty 'logback.configurationFile', System.getProperty('user.dir', null) + '/app/src/main/assets/logback.xml'
    systemProperty 'GB_LOGFILES_DIR', java.nio.file.Files.createTempDirectory('gblog').toString();

}

android {
    compileOptions {
        // for KitKat
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    compileSdkVersion 30
    buildToolsVersion '25.0.3'

    defaultConfig {
        applicationId "com.vimo"
        minSdkVersion 19
        targetSdkVersion 30

        // note: always bump BOTH versionCode and versionName!
        versionName "0.17.3"
        versionCode 84
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError ABORT_ON_CHECK_FAILURE
        lintConfig file("${project.rootDir}/config/lint/lint.xml")

// if true, generate an HTML report (with issue explanations, sourcecode, etc)
        htmlReport true
// optional path to report (default will be lint-results.html in the builddir)
        htmlOutput file("$project.buildDir/reports/lint/lint.html")
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

pmd {
    toolVersion = '5.5.1'
}

dependencies {
//    testCompile 'ch.qos.logback:logback-classic:1.1.3'
//    testCompile 'ch.qos.logback:logback-core:1.1.3'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:3.0.0'
    testImplementation "org.robolectric:robolectric:4.4"

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.androidx.support:appcompat-v7:23.3.0'
    implementation 'com.androidx.support:support-v4:23.3.0'
    implementation 'com.androidx.support:design:23.3.0'
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'
    implementation 'com.github.tony19:logback-android-classic:1.1.1-4'
    implementation 'org.slf4j:slf4j-api:1.7.7'
    implementation 'com.github.PhilJay:MPAndroidChart:v3.0.1'
    implementation 'com.github.pfichtner:durationformatter:0.1.1'
    implementation 'de.cketti.library.changelog:ckchangelog:1.2.2'
    implementation 'net.e175.klaus:solarpositioning:0.0.9'
    implementation 'org.greenrobot:greendao-generator:3.3.0'
    implementation 'com.github.woxthebox:draglistview:1.2.6'
    implementation 'org.apache.commons:commons-lang3:3.5'
    implementation 'org.greenrobot:greendao:3.3.0' // add library

    // compile 'com.microsoft.azure:azure-mobile-android:3.1.0'
    //    compile project(":DaoCore")
    //    compile 'com.github.freeyourgadget:greendao:1998d7cd2d21f662c6044f6ccf3b3a251bbad341'

}

preBuild.dependsOn(":VimoautomationsGB:genSources")
gradle.beforeProject {
    preBuild.dependsOn(":VimoautomationsGB:genSources")
}

check.dependsOn 'lint'
//check.dependsOn 'findbugs', 'pmd', 'lint'
//
//task pmd(type: Pmd) {
//    ruleSetFiles = files("${project.rootDir}/config/pmd/pmd-ruleset.xml")
//    ignoreFailures = !ABORT_ON_CHECK_FAILURE
//    ruleSets = [
//            'java-android',
//            'java-basic',
//            'java-braces',
//            'java-clone',
//            'java-codesize',
//            'java-controversial',
//            'java-coupling',
//            'java-design',
//            'java-empty',
//            'java-finalizers',
//            'java-imports',
//            'java-junit',
//            'java-optimizations',
//            'java-strictexception',
//            'java-strings',
//            'java-sunsecure',
//            'java-typeresolution',
//            'java-unnecessary',
//            'java-unusedcode'
//    ]
//
//    source 'src'
//    include '**/*.java'
//    exclude '**/gen/**'
//
//    reports {
//        xml.enabled = false
//        html.enabled = true
//        xml {
//            destination "$project.buildDir/reports/pmd/pmd.xml"
//        }
//        html {
//            destination "$project.buildDir/reports/pmd/pmd.html"
//        }
//    }
//}

//task findbugs(type: FindBugs) {
//    ignoreFailures = !ABORT_ON_CHECK_FAILURE
//    effort = "default"
//    reportLevel = "medium"
//    excludeFilter = new File("${project.rootDir}/config/findbugs/findbugs-filter.xml")
//    classes = files("${project.rootDir}/app/build/intermediates/classes")
//    source = fileTree('src/main/java/')
//    classpath = files()
//    reports {
//        xml.enabled = false
//        html.enabled = true
//        xml {
//            destination "$project.buildDir/reports/findbugs/findbugs-output.xml"
//        }
//        html {
//            destination "$project.buildDir/reports/findbugs/findbugs-output.html"
//        }
//    }
//}

//tasks.withType(com.github.spotbugs.SpotBugsTask) {
//    spotbugsMain.enabled = true
//    spotbugsTest.enabled = true
//    reports {
//        xml.enabled = false
//        html.enabled = true
//    }
//}
