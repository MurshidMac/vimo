package nodomain.freeyourgadget.gadgetbridge.entities;
import android.os.Build;
import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import nodomain.freeyourgadget.gadgetbridge.entities.UserAttributes;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_ATTRIBUTES".
*/
public class UserAttributesDao extends AbstractDao<UserAttributes, Long> {

    public static final String TABLENAME = "USER_ATTRIBUTES";

    /**
     * Properties of entity UserAttributes.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property HeightCM = new Property(1, int.class, "heightCM", false, "HEIGHT_CM");
        public final static Property WeightKG = new Property(2, int.class, "weightKG", false, "WEIGHT_KG");
        public final static Property SleepGoalHPD = new Property(3, Integer.class, "sleepGoalHPD", false, "SLEEP_GOAL_HPD");
        public final static Property StepsGoalSPD = new Property(4, Integer.class, "stepsGoalSPD", false, "STEPS_GOAL_SPD");
        public final static Property ValidFromUTC = new Property(5, java.util.Date.class, "validFromUTC", false, "VALID_FROM_UTC");
        public final static Property ValidToUTC = new Property(6, java.util.Date.class, "validToUTC", false, "VALID_TO_UTC");
        public final static Property UserId = new Property(7, long.class, "userId", false, "USER_ID");
    };

    private Query<UserAttributes> user_UserAttributesListQuery;

    public UserAttributesDao(DaoConfig config) {
        super(config);
    }
    
    public UserAttributesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_ATTRIBUTES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"HEIGHT_CM\" INTEGER NOT NULL ," + // 1: heightCM
                "\"WEIGHT_KG\" INTEGER NOT NULL ," + // 2: weightKG
                "\"SLEEP_GOAL_HPD\" INTEGER," + // 3: sleepGoalHPD
                "\"STEPS_GOAL_SPD\" INTEGER," + // 4: stepsGoalSPD
                "\"VALID_FROM_UTC\" INTEGER," + // 5: validFromUTC
                "\"VALID_TO_UTC\" INTEGER," + // 6: validToUTC
                "\"USER_ID\" INTEGER NOT NULL );"); // 7: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_ATTRIBUTES\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserAttributes entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getHeightCM());
        stmt.bindLong(3, entity.getWeightKG());
 
        Integer sleepGoalHPD = entity.getSleepGoalHPD();
        if (sleepGoalHPD != null) {
            stmt.bindLong(4, sleepGoalHPD);
        }
 
        Integer stepsGoalSPD = entity.getStepsGoalSPD();
        if (stepsGoalSPD != null) {
            stmt.bindLong(5, stepsGoalSPD);
        }
 
        java.util.Date validFromUTC = entity.getValidFromUTC();
        if (validFromUTC != null) {
            stmt.bindLong(6, validFromUTC.getTime());
        }
 
        java.util.Date validToUTC = entity.getValidToUTC();
        if (validToUTC != null) {
            stmt.bindLong(7, validToUTC.getTime());
        }
        stmt.bindLong(8, entity.getUserId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserAttributes readEntity(Cursor cursor, int offset) {
        UserAttributes entity = new UserAttributes( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // heightCM
            cursor.getInt(offset + 2), // weightKG
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // sleepGoalHPD
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // stepsGoalSPD
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // validFromUTC
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // validToUTC
            cursor.getLong(offset + 7) // userId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserAttributes entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHeightCM(cursor.getInt(offset + 1));
        entity.setWeightKG(cursor.getInt(offset + 2));
        entity.setSleepGoalHPD(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setStepsGoalSPD(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setValidFromUTC(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setValidToUTC(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setUserId(cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserAttributes entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserAttributes entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "userAttributesList" to-many relationship of User. */
    public List<UserAttributes> _queryUser_UserAttributesList(long userId) {
        synchronized (this) {
            if (user_UserAttributesListQuery == null) {
                QueryBuilder<UserAttributes> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                queryBuilder.orderRaw("T.'VALID_FROM_UTC' DESC");
                user_UserAttributesListQuery = queryBuilder.build();
            }
        }
        Query<UserAttributes> query = user_UserAttributesListQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

}
